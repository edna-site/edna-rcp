/*
* generated by Xtext
*/
package org.edna.datamodel.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.edna.datamodel.services.DatamodelGrammarAccess;

public class DatamodelParser extends AbstractContentAssistParser {
	
	@Inject
	private DatamodelGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.edna.datamodel.ui.contentassist.antlr.internal.InternalDatamodelParser createParser() {
		org.edna.datamodel.ui.contentassist.antlr.internal.InternalDatamodelParser result = new org.edna.datamodel.ui.contentassist.antlr.internal.InternalDatamodelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_2(), "rule__Model__Alternatives_2");
					put(grammarAccess.getPackageAccess().getAlternatives_3(), "rule__Package__Alternatives_3");
					put(grammarAccess.getElementDeclarationAccess().getAlternatives_2(), "rule__ElementDeclaration__Alternatives_2");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_0(), "rule__Model__Group_0__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getComplexTypeAccess().getGroup(), "rule__ComplexType__Group__0");
					put(grammarAccess.getComplexTypeAccess().getGroup_3(), "rule__ComplexType__Group_3__0");
					put(grammarAccess.getElementDeclarationAccess().getGroup(), "rule__ElementDeclaration__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getModelAccess().getTargetNamespaceAssignment_0_1(), "rule__Model__TargetNamespaceAssignment_0_1");
					put(grammarAccess.getModelAccess().getImportsAssignment_1(), "rule__Model__ImportsAssignment_1");
					put(grammarAccess.getModelAccess().getTypesAssignment_2_0(), "rule__Model__TypesAssignment_2_0");
					put(grammarAccess.getModelAccess().getPackagesAssignment_2_1(), "rule__Model__PackagesAssignment_2_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
					put(grammarAccess.getPackageAccess().getTypesAssignment_3_0(), "rule__Package__TypesAssignment_3_0");
					put(grammarAccess.getPackageAccess().getPackagesAssignment_3_1(), "rule__Package__PackagesAssignment_3_1");
					put(grammarAccess.getComplexTypeAccess().getNameAssignment_2(), "rule__ComplexType__NameAssignment_2");
					put(grammarAccess.getComplexTypeAccess().getBaseTypeAssignment_3_1(), "rule__ComplexType__BaseTypeAssignment_3_1");
					put(grammarAccess.getComplexTypeAccess().getDocAssignment_5(), "rule__ComplexType__DocAssignment_5");
					put(grammarAccess.getComplexTypeAccess().getElementsAssignment_6(), "rule__ComplexType__ElementsAssignment_6");
					put(grammarAccess.getElementDeclarationAccess().getNameAssignment_0(), "rule__ElementDeclaration__NameAssignment_0");
					put(grammarAccess.getElementDeclarationAccess().getRefAssignment_2_0(), "rule__ElementDeclaration__RefAssignment_2_0");
					put(grammarAccess.getElementDeclarationAccess().getTypeAssignment_2_1(), "rule__ElementDeclaration__TypeAssignment_2_1");
					put(grammarAccess.getElementDeclarationAccess().getMultipleAssignment_3(), "rule__ElementDeclaration__MultipleAssignment_3");
					put(grammarAccess.getElementDeclarationAccess().getOptionalAssignment_4(), "rule__ElementDeclaration__OptionalAssignment_4");
					put(grammarAccess.getElementDeclarationAccess().getDocAssignment_5(), "rule__ElementDeclaration__DocAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.edna.datamodel.ui.contentassist.antlr.internal.InternalDatamodelParser typedParser = (org.edna.datamodel.ui.contentassist.antlr.internal.InternalDatamodelParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DatamodelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DatamodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
