/*
 *    Project: The EDNA Kernel
 *             http://www.edna-site.org
 *
 *    File: "$Id:$"
 *
 *    Copyright (C) 2008-2009 European Synchrotron Radiation Facility
 *                            Grenoble, France
 *
 *    Principal authors: Marie-Francoise Incardona (incardon@esrf.fr)
 *                       Olof Svensson (svensson@esrf.fr)
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as published
 *    by the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    and the GNU Lesser General Public License  along with this program.
 *    If not, see <http://www.gnu.org/licenses/>.
 */
import org::eclipse::emf::ecore;
import org::eclipse::emf::ecore::resource;
import org::eclipse::xsd;
import org::eclipse::uml2::uml;

extension org::eclipse::xtend::util::stdlib::io;
extension org::eclipse::xtend::util::stdlib::globalvar;

/**
 * This is the entry function for the transformation.
 * @param umlModel The UML Model with the classes to transform
 * @param nsUri Value for targetNamespace of the XSD
 */
XSDSchema transform (Model umlModel, String nsUri ):
	// delegate schema creation to createSchema() function to avoid passing
	// the nsUri as argument. The createSchema() function is called later
	// again without nsUri to retrieve the same instance.
	let result = umlModel.createSchema() :
	// don't prefix elements of the model
	result.setQNamePrefix(null, nsUri) ->
	// set schema targetNamespace
	result.setTargetNamespace(nsUri) ->
	("Transformation finished.").info() ->
	result;

/**
 * This function creates the XSDSchema instance. The function
 */
create XSDSchema createSchema (Model umlModel):
	("Tranforming UML Model "+umlModel.eResource().URI+" to XSD Schema...").info() ->
	storeGlobalVar("model", umlModel) -> // used later with getModel()
	// prefix elements from Schema schema (i.e. primitive types) with xs:
	this.setSchemaForSchemaQNamePrefix("xs") ->
	this.setQNamePrefix("xs", "http://www.w3.org/2001/XMLSchema") ->
	// resolve proxies in order to get the right XSDs to include
	resolveAll(umlModel.eResource()) ->
	this.contents.addAll(umlModel.getResourcesToInclude().collect(res|createInclude(umlModel.eResource(), res))) ->
	// iterate over all classes of the umlModel (sorted by name) and
	// create an Element Declaration and Complex Type Definition for each of them
	umlModel.allClasses().sortBy(x|x.name).collect(cls|
		this.contents.add(cls.createElementDeclaration()) ->
		this.contents.add(cls.createTypeDefinition())
	) ->
	// documentation can only be added after elements are attached to the schema
	// see http://download.eclipse.org/modeling/mdt/xsd/javadoc/2.3.0/org/eclipse/xsd/util/XSDPrototypicalSchema.html
	// (search for "annotation must be attached to a schema")
	umlModel.allClasses().setDocumentation()
	;


// function

/**
 * Creates a Complex Type Definition for a class.
 * @param umlClass The UML class to transform.
 */
create XSDComplexTypeDefinition createTypeDefinition (Class umlClass) :
	("Creating Complex Type for "+umlClass.name+".").info() ->
	this.setName(umlClass.name) ->
	this.setContent(umlClass.createComplexTypeContent()) ->
	// set base type if umlClass has a super class.
	!umlClass.superClasses.isEmpty
		? (
		    this.setBaseTypeDefinition(umlClass.superClasses.first().createTypeDefinition()) ->
		    this.setDerivationMethod(XSDDerivationMethod::EXTENSION_LITERAL) // derivation by extension
		  )
		: null
	;

/**
 * Returns the Type Definition for Primitives (xs:string etc.)
 */
cached XSDSimpleTypeDefinition createTypeDefinition (PrimitiveType umlPrimitiveType) :
	("Resolving primitive type "+umlPrimitiveType.name+".").info() ->
	resolvePrimitiveTypeDefinition(getModel().createSchema(), umlPrimitiveType.name);

/** Should never be called. */
Void createTypeDefinition (Object otherType) :
	("Unexpected call for "+otherType.metaType.name).error() ->
	null;

/** Should never be called. */
Void createTypeDefinition (Void nullValue) :
	("Unexpected call for a null value.").error() ->
	null;


/**
 * Creates the content of a Complex Type Definition. The content is of type XSDParticle.
 */
create XSDParticle createComplexTypeContent (Class umlClass) :
	// The content of the Particle is a xs:sequence of Element Declarations
	this.setContent(umlClass.createSequenceForAttributes())
	;

/**
 * Creates a Sequence of Element Declarations for each attribute and
 * outgoing navigable association of a class.
 */
create XSDModelGroup createSequenceForAttributes (Class umlClass) :
	this.setCompositor(XSDCompositor::SEQUENCE_LITERAL) ->
	// create Particle for each class attribute
	this.contents.addAll(umlClass.ownedAttributes.collect(x|x.createParticle())) ->
	// create Particle for each navigable association end
	this.contents.addAll(umlClass.getAssociationEnds().collect(x|x.createParticle()))
	;

/**
 * Creates an Element Declaration for a Class.
 */
create XSDElementDeclaration createElementDeclaration (Class umlClass) :
	("Creating Element Declaration for "+umlClass.name+".").info() ->
	this.setName(umlClass.name) ->
	this.setTypeDefinition(umlClass.createTypeDefinition()) ->
	this;

/**
 * Creates an Element Declaration for an attribute or association end.
 */
create XSDElementDeclaration createElementDeclaration (Property umlProperty) :
	this.setName(umlProperty.name) ->
	this.setTypeDefinition(umlProperty.type.createTypeDefinition()) ->
	// this.setAnnotation(createDocumentation(this, umlProperty)) ->
	this;

create XSDParticle createParticle (Property umlProperty) :
	this.setContent(umlProperty.createElementDeclaration()) ->
	this.setMaxOccurs(umlProperty.upper) ->
	this.setMinOccurs(umlProperty.lower) ->
	this;

Void setDocumentation (Class umlClass) :
	createDocumentation (createElementDeclaration(umlClass), umlClass) ->
	umlClass.getAttributesAndAssociationEnds().setDocumentation();

Void setDocumentation (Property umlProperty) :
	createDocumentation (createElementDeclaration(umlProperty), umlProperty);

//=============================================================================
// Helper functions.
//=============================================================================

/**
 * Selects all outgoing navigable association ends of a class.
 */
List[Property] getAssociationEnds (Class umlClass) :
	umlClass.associations.ownedEnds.select(e|e.navigable && e.type!=umlClass);

List[Property] getAttributesAndAssociationEnds (Class umlClass) :
	umlClass.attributes.union(umlClass.getAssociationEnds()).sortBy(e|e.name);

cached List[Class] allClasses (Model umlModel) :
	convertToList(umlModel.eAllContents()).typeSelect(Class);

cached List[Comment] allComments (Model umlModel) :
	convertToList(umlModel.eAllContents()).typeSelect(Comment);

List[Resource] getResourcesToInclude (Model umlModel) :
	umlModel.eResource().resourceSet.resources
		.reject(r|r==umlModel.eResource())
		.reject(r|{"XSDPrimitiveTypes.uml","Standard.profile.uml","Ecore.profile.uml"}.contains(r.URI.lastSegment()));

Model getModel () : getGlobalVar("model");

//=============================================================================
// Declaration of Java Extensions
//=============================================================================

Void setQNamePrefix (XSDSchema schema, String prefix, String namespace) :
	JAVA util.JavaExtensions.setQNamePrefix (org.eclipse.xsd.XSDSchema, java.lang.String, java.lang.String);

XSDSimpleTypeDefinition resolvePrimitiveTypeDefinition (XSDSchema schema, String primitiveTypeName) :
	JAVA util.JavaExtensions.resolvePrimitiveTypeDefinition (org.eclipse.xsd.XSDSchema, java.lang.String);

List[EObject] convertToList (List col) :
	JAVA util.JavaExtensions.toList (java.util.List);

List[EObject] convertToList (org::eclipse::emf::common::util::TreeIterator col) :
	JAVA util.JavaExtensions.toList (java.util.List);

cached XSDAnnotation createDocumentation (XSDElementDeclaration elementDeclaration, Element umlElement) :
	JAVA util.JavaExtensions.createDocumentation (org.eclipse.xsd.XSDElementDeclaration, org.eclipse.uml2.uml.Element);

XSDInclude createInclude (org::eclipse::emf::ecore::resource::Resource referringResource, org::eclipse::emf::ecore::resource::Resource res) :
	JAVA util.JavaExtensions.createInclude (org.eclipse.emf.ecore.resource.Resource, org.eclipse.emf.ecore.resource.Resource);

Void resolveAll (Resource res) :
	JAVA org.eclipse.emf.ecore.util.EcoreUtil.resolveAll(org.eclipse.emf.ecore.resource.Resource);

