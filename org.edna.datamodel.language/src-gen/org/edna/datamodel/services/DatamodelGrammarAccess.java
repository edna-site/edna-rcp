/*
* generated by Xtext
*/

package org.edna.datamodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DatamodelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTargetNamespaceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTargetNamespaceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTargetNamespaceSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cTargetNamespaceAssignment_0_1.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypesComplexTypeParserRuleCall_2_0_0 = (RuleCall)cTypesAssignment_2_0.eContents().get(0);
		private final Assignment cPackagesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cPackagesPackageParserRuleCall_2_1_0 = (RuleCall)cPackagesAssignment_2_1.eContents().get(0);
		
		//Model:
		//	("targetNamespace" targetNamespace=STRING) imports+=Import* (types+=ComplexType | packages+=Package)*;
		public ParserRule getRule() { return rule; }

		//("targetNamespace" targetNamespace=STRING) imports+=Import* (types+=ComplexType | packages+=Package)*
		public Group getGroup() { return cGroup; }

		//"targetNamespace" targetNamespace=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"targetNamespace"
		public Keyword getTargetNamespaceKeyword_0_0() { return cTargetNamespaceKeyword_0_0; }

		//targetNamespace=STRING
		public Assignment getTargetNamespaceAssignment_0_1() { return cTargetNamespaceAssignment_0_1; }

		//STRING
		public RuleCall getTargetNamespaceSTRINGTerminalRuleCall_0_1_0() { return cTargetNamespaceSTRINGTerminalRuleCall_0_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//(types+=ComplexType | packages+=Package)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//types+=ComplexType
		public Assignment getTypesAssignment_2_0() { return cTypesAssignment_2_0; }

		//ComplexType
		public RuleCall getTypesComplexTypeParserRuleCall_2_0_0() { return cTypesComplexTypeParserRuleCall_2_0_0; }

		//packages+=Package
		public Assignment getPackagesAssignment_2_1() { return cPackagesAssignment_2_1; }

		//Package
		public RuleCall getPackagesPackageParserRuleCall_2_1_0() { return cPackagesPackageParserRuleCall_2_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTypesComplexTypeParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Assignment cPackagesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPackagesPackageParserRuleCall_3_1_0 = (RuleCall)cPackagesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Package:
		//	"package" name=ID "{" (types+=ComplexType | packages+=Package)* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=ID "{" (types+=ComplexType | packages+=Package)* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(types+=ComplexType | packages+=Package)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//types+=ComplexType
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }

		//ComplexType
		public RuleCall getTypesComplexTypeParserRuleCall_3_0_0() { return cTypesComplexTypeParserRuleCall_3_0_0; }

		//packages+=Package
		public Assignment getPackagesAssignment_3_1() { return cPackagesAssignment_3_1; }

		//Package
		public RuleCall getPackagesPackageParserRuleCall_3_1_0() { return cPackagesPackageParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComplexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cBaseTypeComplexTypeCrossReference_3_1_0 = (CrossReference)cBaseTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cBaseTypeComplexTypeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cBaseTypeComplexTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDocAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDocSTRINGTerminalRuleCall_5_0 = (RuleCall)cDocAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsElementDeclarationParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ComplexType:
		//	"complex" "type" name=ID ("extends" baseType=[ComplexType|QualifiedName])? "{" doc=STRING?
		//	elements+=ElementDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"complex" "type" name=ID ("extends" baseType=[ComplexType|QualifiedName])? "{" doc=STRING? elements+=ElementDeclaration*
		//"}"
		public Group getGroup() { return cGroup; }

		//"complex"
		public Keyword getComplexKeyword_0() { return cComplexKeyword_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" baseType=[ComplexType|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//baseType=[ComplexType|QualifiedName]
		public Assignment getBaseTypeAssignment_3_1() { return cBaseTypeAssignment_3_1; }

		//[ComplexType|QualifiedName]
		public CrossReference getBaseTypeComplexTypeCrossReference_3_1_0() { return cBaseTypeComplexTypeCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getBaseTypeComplexTypeQualifiedNameParserRuleCall_3_1_0_1() { return cBaseTypeComplexTypeQualifiedNameParserRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//doc=STRING?
		public Assignment getDocAssignment_5() { return cDocAssignment_5; }

		//STRING
		public RuleCall getDocSTRINGTerminalRuleCall_5_0() { return cDocSTRINGTerminalRuleCall_5_0; }

		//elements+=ElementDeclaration*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//ElementDeclaration
		public RuleCall getElementsElementDeclarationParserRuleCall_6_0() { return cElementsElementDeclarationParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ElementDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cRefComplexTypeCrossReference_2_0_0 = (CrossReference)cRefAssignment_2_0.eContents().get(0);
		private final RuleCall cRefComplexTypeQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cRefComplexTypeCrossReference_2_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTypePrimitiveTypeEnumRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Assignment cMultipleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultipleLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cMultipleAssignment_3.eContents().get(0);
		private final Assignment cOptionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOptionalOptionalKeyword_4_0 = (Keyword)cOptionalAssignment_4.eContents().get(0);
		private final Assignment cDocAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDocSTRINGTerminalRuleCall_5_0 = (RuleCall)cDocAssignment_5.eContents().get(0);
		
		//ElementDeclaration:
		//	name=ID ":" (ref=[ComplexType|QualifiedName] | type=PrimitiveType) multiple?="[]"? optional?="optional"? doc=STRING?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" (ref=[ComplexType|QualifiedName] | type=PrimitiveType) multiple?="[]"? optional?="optional"? doc=STRING?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ref=[ComplexType|QualifiedName] | type=PrimitiveType
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ref=[ComplexType|QualifiedName]
		public Assignment getRefAssignment_2_0() { return cRefAssignment_2_0; }

		//[ComplexType|QualifiedName]
		public CrossReference getRefComplexTypeCrossReference_2_0_0() { return cRefComplexTypeCrossReference_2_0_0; }

		//QualifiedName
		public RuleCall getRefComplexTypeQualifiedNameParserRuleCall_2_0_0_1() { return cRefComplexTypeQualifiedNameParserRuleCall_2_0_0_1; }

		//type=PrimitiveType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//PrimitiveType
		public RuleCall getTypePrimitiveTypeEnumRuleCall_2_1_0() { return cTypePrimitiveTypeEnumRuleCall_2_1_0; }

		//multiple?="[]"?
		public Assignment getMultipleAssignment_3() { return cMultipleAssignment_3; }

		//"[]"
		public Keyword getMultipleLeftSquareBracketRightSquareBracketKeyword_3_0() { return cMultipleLeftSquareBracketRightSquareBracketKeyword_3_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_4() { return cOptionalAssignment_4; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_4_0() { return cOptionalOptionalKeyword_4_0; }

		//doc=STRING?
		public Assignment getDocAssignment_5() { return cDocAssignment_5; }

		//STRING
		public RuleCall getDocSTRINGTerminalRuleCall_5_0() { return cDocSTRINGTerminalRuleCall_5_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// =============================================================================
		//// Datatype rules
		//// =============================================================================
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	
	
	public class PrimitiveTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUndefinedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUndefinedUndefinedKeyword_0_0 = (Keyword)cUndefinedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringStringKeyword_1_0 = (Keyword)cStringEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntegerIntegerKeyword_2_0 = (Keyword)cIntegerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBooleanBooleanKeyword_3_0 = (Keyword)cBooleanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFloatFloatKeyword_4_0 = (Keyword)cFloatEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDoubleDoubleKeyword_5_0 = (Keyword)cDoubleEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum PrimitiveType:
		//	undefined | string | integer | boolean | float | double;
		public EnumRule getRule() { return rule; }

		//undefined | string | integer | boolean | float | double
		public Alternatives getAlternatives() { return cAlternatives; }

		//undefined
		public EnumLiteralDeclaration getUndefinedEnumLiteralDeclaration_0() { return cUndefinedEnumLiteralDeclaration_0; }

		//"undefined"
		public Keyword getUndefinedUndefinedKeyword_0_0() { return cUndefinedUndefinedKeyword_0_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_1() { return cStringEnumLiteralDeclaration_1; }

		//"string"
		public Keyword getStringStringKeyword_1_0() { return cStringStringKeyword_1_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_2() { return cIntegerEnumLiteralDeclaration_2; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_2_0() { return cIntegerIntegerKeyword_2_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_3() { return cBooleanEnumLiteralDeclaration_3; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_3_0() { return cBooleanBooleanKeyword_3_0; }

		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_4() { return cFloatEnumLiteralDeclaration_4; }

		//"float"
		public Keyword getFloatFloatKeyword_4_0() { return cFloatFloatKeyword_4_0; }

		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_5() { return cDoubleEnumLiteralDeclaration_5; }

		//"double"
		public Keyword getDoubleDoubleKeyword_5_0() { return cDoubleDoubleKeyword_5_0; }
	}
	
	private ModelElements pModel;
	private ImportElements pImport;
	private PackageElements pPackage;
	private ComplexTypeElements pComplexType;
	private ElementDeclarationElements pElementDeclaration;
	private PrimitiveTypeElements unknownRulePrimitiveType;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DatamodelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	("targetNamespace" targetNamespace=STRING) imports+=Import* (types+=ComplexType | packages+=Package)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Package:
	//	"package" name=ID "{" (types+=ComplexType | packages+=Package)* "}";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//ComplexType:
	//	"complex" "type" name=ID ("extends" baseType=[ComplexType|QualifiedName])? "{" doc=STRING?
	//	elements+=ElementDeclaration* "}";
	public ComplexTypeElements getComplexTypeAccess() {
		return (pComplexType != null) ? pComplexType : (pComplexType = new ComplexTypeElements());
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}

	//ElementDeclaration:
	//	name=ID ":" (ref=[ComplexType|QualifiedName] | type=PrimitiveType) multiple?="[]"? optional?="optional"? doc=STRING?;
	public ElementDeclarationElements getElementDeclarationAccess() {
		return (pElementDeclaration != null) ? pElementDeclaration : (pElementDeclaration = new ElementDeclarationElements());
	}
	
	public ParserRule getElementDeclarationRule() {
		return getElementDeclarationAccess().getRule();
	}

	//enum PrimitiveType:
	//	undefined | string | integer | boolean | float | double;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (unknownRulePrimitiveType != null) ? unknownRulePrimitiveType : (unknownRulePrimitiveType = new PrimitiveTypeElements());
	}
	
	public EnumRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//// =============================================================================
	//// Datatype rules
	//// =============================================================================
	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
