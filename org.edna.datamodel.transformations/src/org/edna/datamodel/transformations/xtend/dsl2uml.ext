/*
 *    Project: The EDNA Kernel
 *             http://www.edna-site.org
 *
 *    File: "$Id:$"
 *
 *    Copyright (C) 2008-2009 European Synchrotron Radiation Facility
 *                            Grenoble, France
 *
 *    Principal authors: Marie-Francoise Incardona (incardon@esrf.fr)
 *                       Olof Svensson (svensson@esrf.fr)
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as published
 *    by the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    and the GNU Lesser General Public License  along with this program.
 *    If not, see <http://www.gnu.org/licenses/>.
 */
import org::eclipse::emf::ecore;
import org::eclipse::emf::ecore::resource;
import org::eclipse::uml2::uml;
import org::edna::datamodel::datamodel;

extension org::eclipse::xtend::util::stdlib::io;
extension org::eclipse::xtend::util::stdlib::globalvar;
extension org::edna::datamodel::transformations::xtend::javaextensions;

/**
 * This is the entry function for the transformation.
 * @param umlModel The UML Model with the classes to transform
 * @param nsUri Value for targetNamespace of the XSD
 */
create org::eclipse::uml2::uml::Model transform (org::edna::datamodel::datamodel::Model dslModel) :
	("Transforming DSL Model "+dslModel.eResource().URI+" to UML...").info() ->
	storeGlobalVar("targetModel", this) -> // used later with getTargetModel()
	storeGlobalVar("model", dslModel) -> // used later with getModel()
	// use this in combination with the DanglingRefFinderComponent in the workflow
	// attachToResource(this) ->
	// resolve proxies in order to get the right XSDs to include
	resolveAll(dslModel.eResource()) ->
	packagedElements.addAll(dslModel.eAllContents().convertToList().typeSelect(ElementDeclaration).select(e|e.ref!=null).createAssociation()) ->
	// iterate over all classes of the umlModel (sorted by name) and
	// create an Element Declaration and Complex Type Definition for each of them
	("Creating types for "+dslModel.types.sortBy(x|x.name).name).info() ->
	dslModel.types.sortBy(x|x.name).collect(type|
		this.packagedElements.add(type.createTypeDefinition())
	) ->
	("Transformation finished.").info() ->
	this
	;

cached Class createTypeDefinition (ComplexType type) :
	let result = allExternalClasses().selectFirst(c|c.name==type.name) :
	(type.name + " external ? " + (result!=null)).debug() ->
	result != null ? result : createClassForComplexType(type)
	;

/**
 * Creates a Complex Type Definition for a class.
 * @param umlClass The UML class to transform.
 */
create Class createClassForComplexType (ComplexType type) :
	("Creating Class for Complex Type "+type.name+".").info() ->
	this.setName(type.name) ->
	// set base type if umlClass has a super class.
	type.baseType != null
		? (
			this.generalizations.add(createGeneralization(type.baseType))
		  )
		: null ->
	// this.createElementDeclarations (umlClass) ->
	this.ownedAttributes.addAll(type.elements.createProperty()) ->
	this.setDoc(type.doc) ->
	this;

create Generalization createGeneralization (ComplexType type) :
	this.setGeneral(createTypeDefinition(type));

/**
 * Returns the Type Definition for Primitives (xs:string etc.)
 */
cached org::eclipse::uml2::uml::PrimitiveType createTypeDefinition (org::edna::datamodel::datamodel::PrimitiveType dslPrimitiveType) :
	("Resolving primitive type "+dslPrimitiveType.name+".").info() ->
	getPrimitiveTypes().selectFirst(e|e.name==dslPrimitiveType.name)
	;


/** Should never be called. */
Void createTypeDefinition (Object otherType) :
	("Unexpected call for "+otherType.metaType.name).error() ->
	null;

/** Should never be called. */
Void createTypeDefinition (Void nullValue) :
	("Unexpected call for a null value.").error() ->
	null;


/**
 * Creates an Element Declaration for an attribute or association end.
 */
create Property createProperty (ElementDeclaration element) :
	element.info() ->
	this.setName(element.name) ->
	this.setLower(element.optional ? 0 : 1) ->
	this.setUpper(element.multiple ? -1 : 1) ->
	element.ref !=null
		? ( this.setType(createTypeDefinition(element.ref)) ->
		   this.setAssociation(createAssociation(element)) ->
		   this.setIsNavigable(true)
		  )
		: this.setType(createTypeDefinition(element.type)) ->
	this.setDoc(element.doc) ->
	this;

/*
create Property createProperty (ComplexType type) :
	// (type.name ).info() ->
	this.setName(type.name) ->
	this.setType(createTypeDefinition(type)) ->
	this;
*/

create Association createAssociation (ElementDeclaration element) :
	let p = createProperty(element) :
	this.memberEnds.add(p) ->
	//this.ownedEnds.add(p) ->
//	this.memberEnds.add(createProperty((ComplexType)element.eContainer())) ->
//	getTargetModel().packagedElements.add(this) ->
	this;



//=============================================================================
// Documentation
//=============================================================================
Element setDoc (Element elem, Void nullValue) :
	 elem;

Element setDoc (Element elem, String doc) :
	 elem.ownedComments.add(createDocumentation(doc));

create Comment createDocumentation (String doc) :
	this.setBody(doc);

//=============================================================================
// Helper functions.
//=============================================================================

/**
 * Selects all outgoing navigable association ends of a class.
 */
List[Property] getAssociationEnds (Class umlClass) :
	umlClass.associations.ownedEnds.select(e|e.navigable && e.type!=umlClass);

List[Property] getAttributesAndAssociationEnds (Class umlClass) :
	umlClass.attributes.union(umlClass.getAssociationEnds()).sortBy(e|e.name);

cached List[Class] allClasses (Model umlModel) :
	convertToList(umlModel.eAllContents()).typeSelect(Class);

cached List[Class] allExternalClasses () :
	let result = getGlobalResourceSet().resources.collect(r|r.allContents.convertToList().typeSelect(Class)).flatten().sortBy(e|e.name) :
	("External classes: "+result.name).info() ->
	result;

cached List[Comment] allComments (Model umlModel) :
	convertToList(umlModel.eAllContents()).typeSelect(Comment);

List[Resource] getResourcesToInclude (Model umlModel) :
	umlModel.eResource().resourceSet.resources
		.reject(r|r==umlModel.eResource())
		.reject(r|{"XSDPrimitiveTypes.uml","Standard.profile.uml","Ecore.profile.uml"}.contains(r.URI.lastSegment()));

org::edna::datamodel::datamodel::Model getModel () : (org::edna::datamodel::datamodel::Model) getGlobalVar("model");
org::eclipse::uml2::uml::Model getTargetModel () : (org::eclipse::uml2::uml::Model) getGlobalVar("targetModel");

