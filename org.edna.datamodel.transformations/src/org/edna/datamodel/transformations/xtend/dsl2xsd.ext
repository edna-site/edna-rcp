/*
 *    Project: The EDNA Kernel
 *             http://www.edna-site.org
 *
 *    File: "$Id:$"
 *
 *    Copyright (C) 2008-2009 European Synchrotron Radiation Facility
 *                            Grenoble, France
 *
 *    Principal authors: Marie-Francoise Incardona (incardon@esrf.fr)
 *                       Olof Svensson (svensson@esrf.fr)
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as published
 *    by the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    and the GNU Lesser General Public License  along with this program.
 *    If not, see <http://www.gnu.org/licenses/>.
 */
import org::eclipse::emf::ecore;
import org::eclipse::emf::ecore::resource;
import org::eclipse::xsd;
import org::edna::datamodel::datamodel;

extension org::eclipse::xtend::util::stdlib::io;
extension org::eclipse::xtend::util::stdlib::globalvar;
extension org::edna::datamodel::transformations::xtend::javaextensions;

/**
 * This is the entry function for the transformation.
 * @param dslModel The Datamodel DSL Model with the classes to transform
 * @param nsUri Value for targetNamespace of the XSD
 */
XSDSchema transform (Model dslModel):
	// delegate schema creation to createSchema() function to avoid passing
	// the nsUri as argument. The createSchema() function is called later
	// again without nsUri to retrieve the same instance.
	let result = dslModel.createSchema() :
	// don't prefix elements of the model
	result.setQNamePrefix(null, dslModel.targetNamespace) ->
	// set schema targetNamespace
	result.setTargetNamespace(dslModel.targetNamespace) ->
	("Transformation finished.").info() ->
	result;

/**
 * This function creates the XSDSchema instance. The function
 */
create XSDSchema createSchema (Model dslModel):
	("Transforming DSL Model "+dslModel.eResource().URI+" to XSD Schema...").info() ->
	storeGlobalVar("model", dslModel) -> // used later with getModel()
	// prefix elements from Schema schema (i.e. primitive types) with xs:
	this.setSchemaForSchemaQNamePrefix("xs") ->
	this.setQNamePrefix("xs", "http://www.w3.org/2001/XMLSchema") ->
	// resolve proxies in order to get the right XSDs to include
	resolveAll(dslModel.eResource()) ->
	this.contents.addAll(dslModel.getResourcesToInclude().collect(res|createInclude(dslModel.eResource(), res))) ->
	// iterate over all classes of the dslModel (sorted by name) and
	// create an Element Declaration and Complex Type Definition for each of them
	dslModel.types.sortBy(x|x.name).collect(cls|
		this.contents.add(cls.createElementDeclaration()) ->
		this.contents.add(cls.createTypeDefinition())
	) ->
	// documentation can only be added after elements are attached to the schema
	// see http://download.eclipse.org/modeling/mdt/xsd/javadoc/2.3.0/org/eclipse/xsd/util/XSDPrototypicalSchema.html
	// (search for "annotation must be attached to a schema")
	dslModel.types.setDocumentation()
	;


// function

/**
 * Creates a Complex Type Definition for a class.
 * @param umlClass The DSL Complex Type class to transform.
 */
create XSDComplexTypeDefinition createTypeDefinition (ComplexType complexType) :
	("Creating Complex Type for "+complexType.name+".").info() ->
	(""+complexType).info() ->
	this.setName(complexType.name) ->
	this.setContent(complexType.createComplexTypeContent()) ->
	// set base type if complexType has a super class.
	complexType.baseType!=null
		? (
		    this.setBaseTypeDefinition(complexType.baseType.createTypeDefinition()) ->
		    this.setDerivationMethod(XSDDerivationMethod::EXTENSION_LITERAL) // derivation by extension
		  )
		: null
	;

/**
 * Returns the Type Definition for Primitives (xs:string etc.)
 */
cached XSDSimpleTypeDefinition createTypeDefinition (PrimitiveType dslPrimitiveType) :
	("Resolving primitive type "+dslPrimitiveType.name+".").info() ->
	resolvePrimitiveTypeDefinition(getModel().createSchema(), dslPrimitiveType.name);

/** Should never be called. */
Void createTypeDefinition (Object otherType) :
	("Unexpected call for "+otherType.metaType.name).error() ->
	null;

/** Should never be called. */
Void createTypeDefinition (Void nullValue) :
	("Unexpected call for a null value.").error() ->
	null;


/**
 * Creates the content of a Complex Type Definition. The content is of type XSDParticle.
 */
create XSDParticle createComplexTypeContent (ComplexType dslComplexType) :
	// The content of the Particle is a xs:sequence of Element Declarations
	this.setContent(dslComplexType.createSequenceForAttributes())
	;

/**
 * Creates a Sequence of Element Declarations for each attribute and
 * outgoing navigable association of a class.
 */
create XSDModelGroup createSequenceForAttributes (ComplexType dslComplexType) :
	this.setCompositor(XSDCompositor::SEQUENCE_LITERAL) ->
	// create Particle for each element
	this.contents.addAll(dslComplexType.elements.collect(x|x.createParticle()))
	;

/**
 * Creates an Element Declaration for a Class.
 */
create XSDElementDeclaration createElementDeclaration (ComplexType dslComplexType) :
	("Creating Element Declaration for "+dslComplexType.name+".").info() ->
	this.setName(dslComplexType.name) ->
	this.setTypeDefinition(dslComplexType.createTypeDefinition()) ->
	this;

/**
 * Creates an Element Declaration for an attribute or association end.
 */
create XSDElementDeclaration createElementDeclaration (ElementDeclaration dslElementDeclaration) :
	this.setName(dslElementDeclaration.name) ->
	dslElementDeclaration.ref != null
		? this.setTypeDefinition(dslElementDeclaration.ref.createTypeDefinition())
		: this.setTypeDefinition(dslElementDeclaration.type.createTypeDefinition()) ->
	// this.setAnnotation(createDocumentation(this, umlProperty)) ->
	this;

create XSDParticle createParticle (ElementDeclaration dslElementDeclaration) :
	this.setContent(dslElementDeclaration.createElementDeclaration()) ->
	this.setMaxOccurs(dslElementDeclaration.multiple ? -1 : 1) ->
	this.setMinOccurs(dslElementDeclaration.optional ? 0 : 1) ->
	this;

Void setDocumentation (ComplexType dslComplexType) :
	if dslComplexType.doc!=null
		then createDocumentation (createElementDeclaration(dslComplexType), dslComplexType.doc)
		else null->
	dslComplexType.elements.setDocumentation();

Void setDocumentation (ElementDeclaration dslElementDeclaration) :
	if dslElementDeclaration.doc != null
	then createDocumentation (createElementDeclaration(dslElementDeclaration), dslElementDeclaration.doc)
	else null;

//=============================================================================
// Helper functions.
//=============================================================================


List[Resource] getResourcesToInclude (Model dslModel) :
	dslModel.eResource().resourceSet.resources
		.reject(r|r==dslModel.eResource())
		.reject(r|{"XSDPrimitiveTypes.uml","Standard.profile.uml","Ecore.profile.uml"}.contains(r.URI.lastSegment()));

Model getModel () : getGlobalVar("model");
