«REM»
/*
 *    Project: The EDNA Kernel
 *             http://www.edna-site.org
 *
 *    Copyright (C) 2008-2012 European Synchrotron Radiation Facility
 *                            Grenoble, France
 *
 *    Principal authors: Karsten Thoms (karsten.thoms@itemis.de)
 *                       Olof Svensson (svensson@esrf.fr)
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as published
 *    by the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    and the GNU Lesser General Public License  along with this program.
 *    If not, see <http://www.gnu.org/licenses/>.
 *
 *    This file is inspired by early versions of the GenerateDS project
 *    http://www.rexx.com/~dkuhlman/generateDS.html
 *
 */

## LICENSE

## Copyright (c) 2003 Dave Kuhlman

## Permission is hereby granted, free of charge, to any person obtaining
## a copy of this software and associated documentation files (the
## "Software"), to deal in the Software without restriction, including
## without limitation the rights to use, copy, modify, merge, publish,
## distribute, sublicense, and/or sell copies of the Software, and to
## permit persons to whom the Software is furnished to do so, subject to
## the following conditions:

## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.

## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

«ENDREM»

«IMPORT datamodel»

«EXTENSION org::edna::datamodel::generateds::GeneratorExtensions»

«DEFINE main FOR Model»
«FILE targetFilename()-»
«EXPAND preamble»
«EXPAND before»
«EXPAND complexTypDef FOREACH allTypes()»
«EXPAND after»
«ENDFILE»
«ENDDEFINE»

«DEFINE preamble FOR Model-»
#!/usr/bin/env python

#
# Generated «currentTime()» by EDGenerateDS.
#

import os, sys, json
from xml.dom import minidom
from xml.dom import Node

«EXPAND imports»
«ENDDEFINE»

«REM»Static block«ENDREM»
«DEFINE before FOR Model-»

#
# Support/utility functions.
#

# Compabiltity between Python 2 and 3:
if sys.version.startswith('3'):
    unicode = str
    from io import StringIO
else:
    from StringIO import StringIO


def showIndent(outfile, level):
    for idx in range(level):
        outfile.write(unicode('    '))

def createJsonIndent(level):
    strIndent = unicode('')
    for idx in range(level):
        strIndent += unicode('    ')
    return strIndent
    
    
def warnEmptyAttribute(_strName, _strTypeName):
    pass
    #if not _strTypeName in ["float", "double", "string", "boolean", "integer"]:
    #    print("Warning! Non-optional attribute %s of type %s is None!" % (_strName, _strTypeName))

class MixedContainer(object):
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:     # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write(unicode('<%s>%s</%s>' % (self.name, self.value, self.name)))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write(unicode('<%s>%d</%s>' % (self.name, self.value, self.name)))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write(unicode('<%s>%f</%s>' % (self.name, self.value, self.name)))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write(unicode('<%s>%g</%s>' % (self.name, self.value, self.name)))

#
# Data representation classes.
#
«ENDDEFINE»

«REM»Static block«ENDREM»
«DEFINE after FOR Model»

# End of data representation classes.

«ENDDEFINE»




«DEFINE complexTypDef FOR ComplexType-»


class «name»«IF hasExtension()-»(«baseType.name»)«ELSE-»(object)«ENDIF-»:
    «IF doc.length > 1-»
    """«doc»"""
    «ENDIF-»
    «IF !elements.isEmpty-»
    def __init__(self, «initAssignment()»):
    «ELSE-»
        «IF hasExtension()-»
    def __init__(self, «initAssignment(baseType)»):
        «ELSE-»
    def __init__(self):
        pass
        «ENDIF-»
    «ENDIF-»
    «IF hasExtension()-»
        «baseType.name».__init__(self, «initValues(baseType)»)
    «ENDIF-»
    «IF name.matches("XSData")-»
    def copyViaDict(self):
        return XSData.importFromDict(self.exportToDict())

    def exportToDict(self):
        dictOut = {"__XSDataName" : str(self.__class__).split("'")[1]}
        for key, val in self.__dict__.iteritems():
            if callable(val):
                pass
            elif str(val.__class__).split("'")[1].startswith("XSData"):
                dictOut[key] = val.exportToDict()
            elif isinstance(val, list):
                dictOut[key] = [i.exportToDict() for i in val]
            else:
                dictOut[key] = val
        return dictOut
    #Static method for parsing a dictionary
    def importFromDict(inDict):
        xsd = None
        if "__XSDataName" in inDict:
            name = inDict.pop("__XSDataName")
            strModuleName, strClassName = name.split(".", 1)
            module = sys.modules.get(strModuleName, None)
            if module is None:
                print("Error, Dictionary does not represent an XSData object. module %s not in memory" % strModuleName)
            else:
                if hasattr(module, strClassName):
                    xsdClass = getattr(module, strClassName)
                    xsd = xsdClass()
                else:
                    print("Error, Dictionary does not represent an XSData object. Class %s not in module %s" % (strClassName, strModuleName))
        else:
            print("Error, Dictionary does not represent an XSData object. no __XSDataName")
        if xsd is not None:
            for key, val in inDict.iteritems():
                if isinstance(val, list):
                    xsd.__dict__[key] = [ XSData.importFromDict(i) for i in val]
                elif isinstance(val, dict):
                    xsd.__dict__[key] = XSData.importFromDict(val)
                else:
                    xsd.__dict__[key] = val
        return xsd
    importFromDict = staticmethod(importFromDict)    
    «ENDIF-»
    «IF !elements.isEmpty-»
    «FOREACH elements AS e-»
        «FOREACH {"outputFile", "export", "exportChildren", "exportJson", "exportJsonChildren", "dumps", "marshal", "copy", "parseString", "parseFile", "build", "buildChildren", "exportToFile"} AS methodname-»
        «IF e.name.matches(methodname)-»
        strMessage = "FATAL ERROR! Attribute name «e.name» is reserved for EDGenerateDS data binding code, please use another attribute name."
        raise BaseException(strMessage)
        «ENDIF-»
        «ENDFOREACH-»
        «IF e.multiple-»
        if «e.name» is None:
            self._«e.name» = []
        elif «e.name».__class__.__name__ == "list":
            self._«e.name» = «e.name»
        else:
            strMessage = "ERROR! «name» constructor argument '«e.name»' is not list but %s" % self._«e.name».__class__.__name__
            raise BaseException(strMessage)
        «ELSE-»
            «IF e.typeName()=="boolean"-»
        self._«e.name» = bool(«e.name»)
            «ELSEIF e.typeName()=="float"-»
        if «e.name» is None:
            self._«e.name» = None
        else:
            self._«e.name» = float(«e.name»)
            «ELSEIF e.typeName()=="double"-»
        if «e.name» is None:
            self._«e.name» = None
        else:
            self._«e.name» = float(«e.name»)
            «ELSEIF e.typeName()=="integer"-»
        if «e.name» is None:
            self._«e.name» = None
        else:
            self._«e.name» = int(«e.name»)
            «ELSEIF e.typeName()=="string"-»
        self._«e.name» = str(«e.name»)
            «ELSE-»
        if «e.name» is None:
            self._«e.name» = None
        elif «e.name».__class__.__name__ == "«e.typeName()»":
            self._«e.name» = «e.name»
        else:
            strMessage = "ERROR! «name» constructor argument '«e.name»' is not «e.typeName()» but %s" % self._«e.name».__class__.__name__
            raise BaseException(strMessage)
            «ENDIF-»        
        «ENDIF-»
    «ENDFOREACH-»
    «ENDIF-»
    «IF !elements.isEmpty-»
    «FOREACH elements AS e-»
    # Methods and properties for the '«e.name»' attribute
    def get«e.name.toFirstUpper()»(self): return self._«e.name»
    def set«e.name.toFirstUpper()»(self, «e.name»):
        «IF e.multiple-»
        if «e.name» is None:
            self._«e.name» = []
        elif «e.name».__class__.__name__ == "list":
            self._«e.name» = «e.name»
        else:
            strMessage = "ERROR! «name».set«e.name.toFirstUpper()» argument is not list but %s" % «e.name».__class__.__name__
            raise BaseException(strMessage)
        «ELSE-»
            «IF e.typeName()=="boolean"-»
        self._«e.name» = bool(«e.name»)
            «ELSEIF e.typeName()=="float"-»
        if «e.name» is None:
            self._«e.name» = None
        else:
            self._«e.name» = float(«e.name»)
            «ELSEIF e.typeName()=="double"-»
        if «e.name» is None:
            self._«e.name» = None
        else:
            self._«e.name» = float(«e.name»)
            «ELSEIF e.typeName()=="integer"-»
        if «e.name» is None:
            self._«e.name» = None
        else:
            self._«e.name» = int(«e.name»)
            «ELSEIF e.typeName()=="string"-»
        self._«e.name» = str(«e.name»)
            «ELSE-»
        if «e.name» is None:
            self._«e.name» = None
        elif «e.name».__class__.__name__ == "«e.typeName()»":
            self._«e.name» = «e.name»
        else:
            strMessage = "ERROR! «name».set«e.name.toFirstUpper()» argument is not «e.typeName()» but %s" % «e.name».__class__.__name__
            raise BaseException(strMessage)
            «ENDIF-»        
        «ENDIF-»
    def del«e.name.toFirstUpper()»(self): self._«e.name» = None
    «e.name» = property(get«e.name.toFirstUpper()», set«e.name.toFirstUpper()», del«e.name.toFirstUpper()», "Property for «e.name»")
    «IF e.multiple-»
    def add«e.name.toFirstUpper()»(self, value):
        «IF e.typeName()=="boolean"-»
        self._«e.name».append(value)
        «ELSEIF e.typeName()=="float"-»
        self._«e.name».append(float(value))
        «ELSEIF e.typeName()=="double"-»
        self._«e.name».append(float(value))
        «ELSEIF e.typeName()=="integer"-»
        self._«e.name».append(int(value))
        «ELSEIF e.typeName()=="string"-»
        self._«e.name».append(str(value))
        «ELSE-»
        if value is None:
            strMessage = "ERROR! «name».add«e.name.toFirstUpper()» argument is None"
            raise BaseException(strMessage)            
        elif value.__class__.__name__ == "«e.typeName()»":
            self._«e.name».append(value)
        else:
            strMessage = "ERROR! «name».add«e.name.toFirstUpper()» argument is not «e.typeName()» but %s" % value.__class__.__name__
            raise BaseException(strMessage)
            «ENDIF-»        
    def insert«e.name.toFirstUpper()»(self, index, value):
        if index is None:
            strMessage = "ERROR! «name».insert«e.name.toFirstUpper()» argument 'index' is None"
            raise BaseException(strMessage)            
        «IF e.typeName()=="boolean"-»
        self._«e.name»[index] = value
        «ELSEIF e.typeName()=="float"-»
        self._«e.name»[index] = float(value)
        «ELSEIF e.typeName()=="double"-»
        self._«e.name»[index] = float(value)
        «ELSEIF e.typeName()=="integer"-»
        self._«e.name»[index] = int(value)
        «ELSEIF e.typeName()=="string"-»
        self._«e.name»[index] = str(value)
        «ELSE-»
        if value is None:
            strMessage = "ERROR! «name».insert«e.name.toFirstUpper()» argument 'value' is None"
            raise BaseException(strMessage)            
        elif value.__class__.__name__ == "«e.typeName()»":
            self._«e.name»[index] = value
        else:
            strMessage = "ERROR! «name».add«e.name.toFirstUpper()» argument is not «e.typeName()» but %s" % value.__class__.__name__
            raise BaseException(strMessage)
            «ENDIF-»        
    «ENDIF-»
    «ENDFOREACH-»
    «ENDIF-»
    def export(self, outfile, level, name_='«name»'):
        showIndent(outfile, level)
        outfile.write(unicode('<%s>\n' % name_))
        self.exportChildren(outfile, level + 1, name_)
        showIndent(outfile, level)
        outfile.write(unicode('</%s>\n' % name_))
    def exportChildren(self, outfile, level, name_='«name»'):
    «IF hasExtension()-»
        «baseType.name».exportChildren(self, outfile, level, name_)
    «ELSE-»
        pass
    «ENDIF-»
    «EXPAND exportChildren FOREACH elements-»
    def exportJson(self, level, name_='«name»'):
        if name_ is None:
            strJson = createJsonIndent(level) + unicode('{\n')
        else:
            strJson = createJsonIndent(level) + unicode('"%s": {\n' % name_)
        strJson += self.exportJsonChildren(level + 1, name_)
        if strJson.endswith(',\n'):
            # Remove last ',\n' from string, replace with '\n'
            strJson = strJson[:-2] + '\n'
        strJson += createJsonIndent(level) + unicode('},\n')
        return strJson
    def exportJsonChildren(self, level, name_='«name»'):
        strJsonChildren = ""
    «IF hasExtension()-»
        strJsonChildren += «baseType.name».exportJsonChildren(self, level, name_)
    «ELSE-»
        strJsonChildren += ""
    «ENDIF-»
    «EXPAND exportJsonChildren FOREACH elements-»
        return strJsonChildren
    def build(self, node_):
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildChildren(self, child_, nodeName_):
    «IF !elements.isEmpty-»
    «FOREACH elements AS e ITERATOR it-»
        «it.firstIteration ? "if" : "elif"» child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == '«e.name»':
            «IF e.typeName()=="boolean"-»
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('True', 'true', '1'):
                    ival_ = True
                elif sval_ in ('False', 'false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                «IF e.multiple-»
                self._«e.name».append(ival_)
                «ELSE-»
                self._«e.name» = ival_
                «ENDIF-»
            «ELSEIF e.typeName()=="string"-»
            value_ = ''
            for text__content_ in child_.childNodes:
                if text__content_.nodeValue is not None:
                    value_ += text__content_.nodeValue
            «IF e.multiple-»
            self._«e.name».append(value_)
            «ELSE-»
            self._«e.name» = value_
            «ENDIF-»
            «ELSEIF e.typeName()=="double" || e.typeName()=="float"-»
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    fval_ = float(sval_)
                except ValueError:
                    raise ValueError('requires float (or double) -- %s' % child_.toxml())
                «IF e.multiple-»
                self._«e.name».append(fval_)
                «ELSE-»
                self._«e.name» = fval_
                «ENDIF-»
            «ELSEIF e.typeName()=="integer"-»
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError:
                    raise ValueError('requires integer -- %s' % child_.toxml())
                «IF e.multiple-»
                self._«e.name».append(ival_)
                «ELSE-»
                self._«e.name» = ival_
                «ENDIF-»
            «ELSE-»
            obj_ = «e.typeName()»()
            obj_.build(child_)
            self.«IF e.multiple»«e.name».append«ELSE»set«e.name.toFirstUpper()»«ENDIF-»(obj_)
            «ENDIF-»
    «ENDFOREACH-»
    «ELSE-»
        pass
    «ENDIF-»
    «IF hasExtension()-»
        «baseType.name».buildChildren(self, child_, nodeName_)
    «ENDIF-»
    #Method for marshalling an object
    def marshal( self ):
        oStreamString = StringIO()
        oStreamString.write(unicode('<?xml version="1.0" ?>\n'))
        self.export( oStreamString, 0, name_="«name»" )
        oStringXML = oStreamString.getvalue()
        oStreamString.close()
        return oStringXML
    #Only to export the entire XML tree to a file stream on disk
    def exportToFile( self, _outfileName ):
        outfile = open( _outfileName, "w" )
        outfile.write(unicode('<?xml version=\"1.0\" ?>\n'))
        self.export( outfile, 0, name_='«name»' )
        outfile.close()
    #Deprecated method, replaced by exportToFile
    def outputFile( self, _outfileName ):
        print("WARNING: Method outputFile in class «name» is deprecated, please use instead exportToFile!")
        self.exportToFile(_outfileName)
    #Method for making a copy in a new instance
    def copy( self ):
        return «name».parseString(self.marshal())
    # Export to json format
    def dumps(self):
        strJson = self.exportJson(0, name_=None)
        if strJson.endswith('},\n'):
            strJson = strJson[:-2]
        return strJson
    def buildFromDict(self, node_dict_):
        for node_name_, node_value_ in node_dict_.iteritems():
            self.buildChildrenFromDict(node_name_, node_value_)
    def buildChildrenFromDict(self, nodeName_, nodeValue_):
    «IF !elements.isEmpty-»
    «FOREACH elements AS e ITERATOR it-»
        «it.firstIteration ? "if" : "elif"» nodeName_ == '«e.name»':
            «IF e.typeName()=="boolean"-»
            «IF e.multiple-»
            self._«e.name» = []
            for value_ in nodeValue_:
                self._«e.name».append(bool(value_))
            «ELSE-»
            self._«e.name» = bool(nodeValue_)
            «ENDIF-»
            «ELSEIF e.typeName()=="string"-»
            «IF e.multiple-»
            self._«e.name» = []
            for value_ in nodeValue_:
                self._«e.name».append(str(value_))
            «ELSE-»
            self._«e.name» = str(nodeValue_)
            «ENDIF-»
            «ELSEIF e.typeName()=="double" || e.typeName()=="float"-»
            «IF e.multiple-»
            self._«e.name» = []
            for value_ in nodeValue_:
                self._«e.name».append(float(value_))
            «ELSE-»
            self._«e.name» = float(nodeValue_)
            «ENDIF-»
            «ELSEIF e.typeName()=="integer"-»
            «IF e.multiple-»
            self._«e.name» = []
            for value_ in nodeValue_:
                self._«e.name».append(int(value_))
            «ELSE-»
            self._«e.name» = int(nodeValue_)
            «ENDIF-»
            «ELSE-»
            self._«e.name» = «e.typeName()»()
            «e.typeName()».buildFromDict(self._«e.name», nodeValue_)
            «ENDIF-»
    «ENDFOREACH-»
    «ELSE-»
        pass
    «ENDIF-»
    # Import from json format
    def loads(self, _strJson):
        dict_in = json.loads(_strJson)
        self.buildFromDict(dict_in)
    #Static method for parsing a string
    def parseString( _inString ):
        doc = minidom.parseString(_inString)
        rootNode = doc.documentElement
        rootObj = «name»()
        rootObj.build(rootNode)
        # Check that all minOccurs are obeyed by marshalling the created object
        oStreamString = StringIO()
        rootObj.export( oStreamString, 0, name_="«name»" )
        oStreamString.close()
        return rootObj
    parseString = staticmethod( parseString )
    #Static method for parsing a file
    def parseFile( _inFilePath ):
        doc = minidom.parse(_inFilePath)
        rootNode = doc.documentElement
        rootObj = «name»()
        rootObj.build(rootNode)
        return rootObj
    parseFile = staticmethod( parseFile )
# end class «name»
«ENDDEFINE»

«DEFINE exportChildren FOR ElementDeclaration-»
    «IF multiple-»
        for «name»_ in self.get«name.toFirstUpper()»():
            «IF typeName()=="boolean"-»
            showIndent(outfile, level)
            outfile.write(unicode('<«name»>%d</«name»>\n' % «name»_))
            «ELSEIF typeName()=="string"-»
            showIndent(outfile, level)
            outfile.write(unicode('<«name»>%s</«name»>\n' % «name»_))
            «ELSEIF typeName()=="double" || typeName()=="float"-»
            showIndent(outfile, level)
            outfile.write(unicode('<«name»>%e</«name»>\n' % «name»_))
            «ELSEIF typeName()=="integer"-»
            showIndent(outfile, level)
            outfile.write(unicode('<«name»>%d</«name»>\n' % «name»_))
            «ELSE-»
            «name»_.export(outfile, level, name_='«name»')
            «ENDIF-»
        «IF !optional-»
        if self.get«name.toFirstUpper()»() == []:
            warnEmptyAttribute("«name»", "«typeName()»")
        «ENDIF-»
    «ELSE-»
        if self._«name» is not None:
            «IF typeName()=="boolean"-»
            showIndent(outfile, level)
            if self._«name»:
                outfile.write(unicode('<«name»>true</«name»>\n'))
            else:
                outfile.write(unicode('<«name»>false</«name»>\n'))
            «ELSEIF typeName()=="string"-»
            showIndent(outfile, level)
            outfile.write(unicode('<«name»>%s</«name»>\n' % self._«name»))
            «ELSEIF typeName()=="double" || typeName()=="float"-»
            showIndent(outfile, level)
            outfile.write(unicode('<«name»>%e</«name»>\n' % self._«name»))
            «ELSEIF typeName()=="integer"-»
            showIndent(outfile, level)
            outfile.write(unicode('<«name»>%d</«name»>\n' % self._«name»))
            «ELSE-»
            self.«name».export(outfile, level, name_='«name»')
            «ENDIF-»
        «IF !optional-»
        else:
            warnEmptyAttribute("«name»", "«typeName()»")
        «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE exportJsonChildren FOR ElementDeclaration-»
    «IF multiple-»
        if self.get«name.toFirstUpper()»() != []:
            strJsonChildren += createJsonIndent(level) + unicode('"«name»": [') 
            for «name»_ in self.get«name.toFirstUpper()»():
                «IF typeName()=="boolean"-»
                strJsonChildren += unicode('%d, ' % «name»_)
                «ELSEIF typeName()=="string"-»
                strJsonChildren += unicode('"%s", ' % «name»_)
                «ELSEIF typeName()=="double" || typeName()=="float"-»
                strJsonChildren += unicode('%e, ' % «name»_)
                «ELSEIF typeName()=="integer"-»
                strJsonChildren += unicode('%d, ' % «name»_)
                «ELSE-»
                strJsonChildren += «name»_.exportJson(level, name_='«name»')
                «ENDIF-»
            if strJsonChildren.endswith(', '):
                strJsonChildren = strJsonChildren[:-2]
            strJsonChildren += "]\n"
            «IF !optional-»
            if self.get«name.toFirstUpper()»() == []:
                warnEmptyAttribute("«name»", "«typeName()»")
            «ENDIF-»
    «ELSE-»
        if self._«name» is not None:
            «IF typeName()=="boolean"-»
            if self._«name»:
                strJsonChildren += createJsonIndent(level) + unicode('"«name»": true,\n')
            else:
                strJsonChildren += createJsonIndent(level) + unicode('"«name»": false,\n')
            «ELSEIF typeName()=="string"-»
            strJsonChildren += createJsonIndent(level) + unicode('"«name»": "%s",\n' % self._«name»)
            «ELSEIF typeName()=="double" || typeName()=="float"-»
            strJsonChildren += createJsonIndent(level) + unicode('"«name»": %e,\n' % self._«name»)
            «ELSEIF typeName()=="integer"-»
            strJsonChildren += createJsonIndent(level) + unicode('"«name»": %d,\n' % self._«name»)
            «ELSE-»
            strJsonChildren += self.«name».exportJson(level, name_='«name»')
            «ENDIF-»
        «IF !optional-»
        else:
            warnEmptyAttribute("«name»", "«typeName()»")
        «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE imports FOR Model-»

«IF !sortComplexTypes(allImportedTypes()).isEmpty-»
strEdnaHome = os.environ.get("EDNA_HOME", None)

dictLocation = { \
«FOREACH sortComplexTypes(allImportedTypes()) AS t-»
 "«t.resourceName()»": "«t.resourceLocation()»", \
«ENDFOREACH-»
}

try:
«FOREACH sortComplexTypes(allImportedTypes()) AS t-»
    from «t.resourceName()» import «t.name»
«ENDFOREACH-»
except ImportError as error:
    if strEdnaHome is not None:
        for strXsdName in dictLocation:
            strXsdModule = strXsdName + ".py"
            strRootdir = os.path.dirname(os.path.abspath(os.path.join(strEdnaHome, dictLocation[strXsdName])))
            for strRoot, listDirs, listFiles in os.walk(strRootdir):
                if strXsdModule in listFiles:
                    sys.path.append(strRoot)
    else:
        raise error
«FOREACH sortComplexTypes(allImportedTypes()) AS t-»
from «t.resourceName()» import «t.name»
«ENDFOREACH»
«ENDIF-»
«ENDDEFINE»
