«REM»
/*
 *    Project: The EDNA Kernel
 *             http://www.edna-site.org
 *
 *    File: "$Id:$"
 *
 *    Copyright (C) 2008-2011 European Synchrotron Radiation Facility
 *                            Grenoble, France
 *
 *    Principal authors: Karsten Thoms (karsten.thoms@itemis.de)
 *                       Olof Svensson (svensson@esrf.fr)
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as published
 *    by the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    and the GNU Lesser General Public License  along with this program.
 *    If not, see <http://www.gnu.org/licenses/>.
 *
 *    This file is inspired by early versions of the GenerateDS project
 *    http://www.rexx.com/~dkuhlman/generateDS.html
 *
 */

## LICENSE

## Copyright (c) 2003 Dave Kuhlman

## Permission is hereby granted, free of charge, to any person obtaining
## a copy of this software and associated documentation files (the
## "Software"), to deal in the Software without restriction, including
## without limitation the rights to use, copy, modify, merge, publish,
## distribute, sublicense, and/or sell copies of the Software, and to
## permit persons to whom the Software is furnished to do so, subject to
## the following conditions:

## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.

## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

«ENDREM»

«IMPORT datamodel»

«EXTENSION org::edna::datamodel::generateds::GeneratorExtensions»

«DEFINE main FOR Model»
«FILE targetFilename()-»
«EXPAND preamble»
«EXPAND before»
«EXPAND complexTypDef FOREACH allTypes()»
«EXPAND after»
«ENDFILE»
«ENDDEFINE»

«DEFINE preamble FOR Model-»
#!/usr/bin/env python

#
# Generated «currentTime()» by EDGenerateDS.
#

import sys
from io import StringIO
from xml.dom import minidom
from xml.dom import Node

«EXPAND imports»
«ENDDEFINE»

«REM»Static block«ENDREM»
«DEFINE before FOR Model-»

#
# Support/utility functions.
#

# Compabiltity between Python 2 and 3:
if sys.version.startswith('3'):
	unicode = str


def showIndent(outfile, level):
	for idx in range(level):
		outfile.write(unicode('    '))


def checkType(_strClassName, _strMethodName, _value, _strExpectedType):
	if not _strExpectedType in ["float", "double", "string", "boolean", "integer"]:
		if _value != None:
			if _value.__class__.__name__ != _strExpectedType:
				strMessage = "ERROR! %s.%s argument is not %s but %s" % (_strClassName, _strMethodName, _strExpectedType, _value.__class__.__name__)
				print(strMessage)
				#raise BaseException(strMessage)
	elif _value is None:
		strMessage = "ERROR! %s.%s argument which should be %s is None" % (_strClassName, _strMethodName, _strExpectedType)
		print(strMessage)
		#raise BaseException(strMessage)


def warnEmptyAttribute(_strName, _strTypeName):
	pass
	#if not _strTypeName in ["float", "double", "string", "boolean", "integer"]:
	#		print("Warning! Non-optional attribute %s of type %s is None!" % (_strName, _strTypeName))

class MixedContainer:
	# Constants for category:
	CategoryNone = 0
	CategoryText = 1
	CategorySimple = 2
	CategoryComplex = 3
	# Constants for content_type:
	TypeNone = 0
	TypeText = 1
	TypeString = 2
	TypeInteger = 3
	TypeFloat = 4
	TypeDecimal = 5
	TypeDouble = 6
	TypeBoolean = 7
	def __init__(self, category, content_type, name, value):
		self.category = category
		self.content_type = content_type
		self.name = name
		self.value = value
	def getCategory(self):
		return self.category
	def getContenttype(self, content_type):
		return self.content_type
	def getValue(self):
		return self.value
	def getName(self):
		return self.name
	def export(self, outfile, level, name):
		if self.category == MixedContainer.CategoryText:
			outfile.write(self.value)
		elif self.category == MixedContainer.CategorySimple:
			self.exportSimple(outfile, level, name)
		else:	 # category == MixedContainer.CategoryComplex
			self.value.export(outfile, level, name)
	def exportSimple(self, outfile, level, name):
		if self.content_type == MixedContainer.TypeString:
			outfile.write(unicode('<%s>%s</%s>' % (self.name, self.value, self.name)))
		elif self.content_type == MixedContainer.TypeInteger or \
				self.content_type == MixedContainer.TypeBoolean:
			outfile.write(unicode('<%s>%d</%s>' % (self.name, self.value, self.name)))
		elif self.content_type == MixedContainer.TypeFloat or \
				self.content_type == MixedContainer.TypeDecimal:
			outfile.write(unicode('<%s>%f</%s>' % (self.name, self.value, self.name)))
		elif self.content_type == MixedContainer.TypeDouble:
			outfile.write(unicode('<%s>%g</%s>' % (self.name, self.value, self.name)))

#
# Data representation classes.
#
«ENDDEFINE»

«REM»Static block«ENDREM»
«DEFINE after FOR Model»

# End of data representation classes.

«ENDDEFINE»

«DEFINE complexTypDef FOR ComplexType»
class «name»«IF hasExtension()»(«baseType.name»)«ENDIF»:
	«IF doc.length > 1-»
	"""«doc»"""
	«ENDIF-»
	«IF !elements.isEmpty-»
	def __init__(self, «initAssignment()»):
	«ELSE-»
	«IF hasExtension()-»
	def __init__(self, «initAssignment(baseType)»):
	«ELSE-»
	def __init__(self):
		pass
	«ENDIF-»
	«ENDIF-»
	«IF hasExtension()-»
		«baseType.name».__init__(self, «initValues(baseType)»)
	«ENDIF-»
	«IF !elements.isEmpty-»
	«FOREACH elements AS e-»
		«IF e.multiple-»
		if «e.name» is None:
			self.__«e.name» = []
		else:
			self.__«e.name» = «e.name»
		«ELSE-»
		self.__«e.name» = «e.name»
		«ENDIF-»
	«ENDFOREACH-»
	«ENDIF-»
	«IF !elements.isEmpty-»
	«FOREACH elements AS e-»
	def get«e.name.toFirstUpper()»(self): return self.__«e.name»
	def set«e.name.toFirstUpper()»(self, «e.name»):
		«IF e.multiple-»
		checkType("«name»", "set«e.name.toFirstUpper()»", «e.name», "list")
		«ELSE-»
		checkType("«name»", "set«e.name.toFirstUpper()»", «e.name», "«e.typeName()»")
		«ENDIF-»
		self.__«e.name» = «e.name»
	def del«e.name.toFirstUpper()»(self): self.__«e.name» = None
	# Properties
	«e.name» = property(get«e.name.toFirstUpper()», set«e.name.toFirstUpper()», del«e.name.toFirstUpper()», "Property for «e.name»")
	«IF e.multiple-»
	def add«e.name.toFirstUpper()»(self, value):
		checkType("«name»", "set«e.name.toFirstUpper()»", value, "«e.typeName()»")
		self.__«e.name».append(value)
	def insert«e.name.toFirstUpper()»(self, index, value):
		checkType("«name»", "set«e.name.toFirstUpper()»", value, "«e.typeName()»")
		self.__«e.name»[index] = value
	«ENDIF-»
	«ENDFOREACH-»
	«ENDIF-»
	def export(self, outfile, level, name_='«name»'):
		showIndent(outfile, level)
		outfile.write(unicode('<%s>\n' % name_))
		self.exportChildren(outfile, level + 1, name_)
		showIndent(outfile, level)
		outfile.write(unicode('</%s>\n' % name_))
	def exportChildren(self, outfile, level, name_='«name»'):
	«IF hasExtension()-»
		«baseType.name».exportChildren(self, outfile, level, name_)
	«ELSE-»
		pass
	«ENDIF-»
	«EXPAND exportChildren FOREACH elements-»
	def build(self, node_):
		for child_ in node_.childNodes:
			nodeName_ = child_.nodeName.split(':')[-1]
			self.buildChildren(child_, nodeName_)
	def buildChildren(self, child_, nodeName_):
	«IF !elements.isEmpty-»
	«FOREACH elements AS e ITERATOR it-»
		«it.firstIteration ? "if" : "elif"» child_.nodeType == Node.ELEMENT_NODE and \
			nodeName_ == '«e.name»':
			«IF e.typeName()=="boolean"-»
			if child_.firstChild:
				sval_ = child_.firstChild.nodeValue
				if sval_ in ('True', 'true', '1'):
					ival_ = True
				elif sval_ in ('False', 'false', '0'):
					ival_ = False
				else:
					raise ValueError('requires boolean -- %s' % child_.toxml())
				«IF e.multiple-»
				self.__«e.name».append(ival_)
				«ELSE-»
				self.__«e.name» = ival_
				«ENDIF-»
			«ELSEIF e.typeName()=="string"-»
			value_ = ''
			for text__content_ in child_.childNodes:
				if text__content_.nodeValue is not None:
					value_ += text__content_.nodeValue
			«IF e.multiple-»
			self.__«e.name».append(value_)
			«ELSE-»
			self.__«e.name» = value_
			«ENDIF-»
			«ELSEIF e.typeName()=="double" || e.typeName()=="float"-»
			if child_.firstChild:
				sval_ = child_.firstChild.nodeValue
				try:
					fval_ = float(sval_)
				except ValueError:
					raise ValueError('requires float (or double) -- %s' % child_.toxml())
				«IF e.multiple-»
				self.__«e.name».append(fval_)
				«ELSE-»
				self.__«e.name» = fval_
				«ENDIF-»
			«ELSEIF e.typeName()=="integer"-»
			if child_.firstChild:
				sval_ = child_.firstChild.nodeValue
				try:
					ival_ = int(sval_)
				except ValueError:
					raise ValueError('requires integer -- %s' % child_.toxml())
				«IF e.multiple-»
				self.__«e.name».append(ival_)
				«ELSE-»
				self.__«e.name» = ival_
				«ENDIF-»
			«ELSE-»
			obj_ = «e.typeName()»()
			obj_.build(child_)
			self.«IF e.multiple»«e.name».append«ELSE»set«e.name.toFirstUpper()»«ENDIF-»(obj_)
			«ENDIF-»
	«ENDFOREACH-»
	«ELSE-»
		pass
	«ENDIF-»
	«IF hasExtension()-»
		«baseType.name».buildChildren(self, child_, nodeName_)
	«ENDIF-»
	#Method for marshalling an object
	def marshal( self ):
		oStreamString = StringIO()
		oStreamString.write(unicode('<?xml version="1.0" ?>\n'))
		self.export( oStreamString, 0, name_="«name»" )
		oStringXML = oStreamString.getvalue()
		oStreamString.close()
		return oStringXML
	#Only to export the entire XML tree to a file stream on disk
	def outputFile( self, _outfileName ):
		outfile = open( _outfileName, "w" )
		outfile.write(unicode('<?xml version=\"1.0\" ?>\n'))
		self.export( outfile, 0, name_='«name»' )
		outfile.close()
	#Method for making a copy in a new instance
	def copy( self ):
		return «name».parseString(self.marshal())
	#Static method for parsing a string
	def parseString( _inString ):
		doc = minidom.parseString(_inString)
		rootNode = doc.documentElement
		rootObj = «name»()
		rootObj.build(rootNode)
		# Check that all minOccurs are obeyed by marshalling the created object
		oStreamString = StringIO()
		rootObj.export( oStreamString, 0, name_="«name»" )
		oStreamString.close()
		return rootObj
	parseString = staticmethod( parseString )
	#Static method for parsing a file
	def parseFile( _inFilePath ):
		doc = minidom.parse(_inFilePath)
		rootNode = doc.documentElement
		rootObj = «name»()
		rootObj.build(rootNode)
		return rootObj
	parseFile = staticmethod( parseFile )
# end class «name»
«ENDDEFINE»

«DEFINE exportChildren FOR ElementDeclaration-»
	«IF multiple-»
		for «name»_ in self.get«name.toFirstUpper()»():
			«IF typeName()=="boolean"-»
			showIndent(outfile, level)
			outfile.write(unicode('<«name»>%d</«name»>\n' % «name»_))
			«ELSEIF typeName()=="string"-»
			showIndent(outfile, level)
			outfile.write(unicode('<«name»>%s</«name»>\n' % «name»_))
			«ELSEIF typeName()=="double" || typeName()=="float"-»
			showIndent(outfile, level)
			outfile.write(unicode('<«name»>%e</«name»>\n' % «name»_))
			«ELSEIF typeName()=="integer"-»
			showIndent(outfile, level)
			outfile.write(unicode('<«name»>%d</«name»>\n' % «name»_))
			«ELSE-»
			«name»_.export(outfile, level, name_='«name»')
			«ENDIF-»
		«IF !optional-»
		if self.get«name.toFirstUpper()»() == []:
			warnEmptyAttribute("«name»", "«typeName()»")
		«ENDIF-»
	«ELSE-»
		if self.__«name» is not None:
			«IF typeName()=="boolean"-»
			showIndent(outfile, level)
			if self.__«name»:
				outfile.write(unicode('<«name»>true</«name»>\n'))
			else:
				outfile.write(unicode('<«name»>false</«name»>\n'))
			«ELSEIF typeName()=="string"-»
			showIndent(outfile, level)
			outfile.write(unicode('<«name»>%s</«name»>\n' % self.__«name»))
			«ELSEIF typeName()=="double" || typeName()=="float"-»
			showIndent(outfile, level)
			outfile.write(unicode('<«name»>%e</«name»>\n' % self.__«name»))
			«ELSEIF typeName()=="integer"-»
			showIndent(outfile, level)
			outfile.write(unicode('<«name»>%d</«name»>\n' % self.__«name»))
			«ELSE-»
			self.«name».export(outfile, level, name_='«name»')
			«ENDIF-»
		«IF !optional-»
		else:
			warnEmptyAttribute("«name»", "«typeName()»")
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE imports FOR Model-»
«FOREACH sortComplexTypes(allImportedTypes()) AS t-»
from «t.resourceName()» import «t.name»
«ENDFOREACH»
«ENDDEFINE»
