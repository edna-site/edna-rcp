/*
 *    Project: The EDNA Kernel
 *             http://www.edna-site.org
 *
 *    File: "$Id:$"
 *
 *    Copyright (C) 2008-2009 European Synchrotron Radiation Facility
 *                            Grenoble, France
 *
 *    Principal authors: Marie-Francoise Incardona (incardon@esrf.fr)
 *                       Olof Svensson (svensson@esrf.fr)
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as published
 *    by the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    and the GNU Lesser General Public License  along with this program.
 *    If not, see <http://www.gnu.org/licenses/>.
 */
import datamodel;

extension org::eclipse::xtend::util::stdlib::globalvar;
extension org::eclipse::xtend::util::stdlib::io reexport;

/**
 * Returns true if a type has an extension element
 */
Boolean hasExtension(ComplexType ct):
	ct.baseType != null;


List[ElementDeclaration] getElementsInSequence(Void v): {};
List[ElementDeclaration] getElementsInSequence(ComplexType ct):
	ct.elements;

String valueError(ElementDeclaration e):
	switch (e.name) {
		default : " ValueError('requires float (or double) -- %s' % child_.toxml())"
	};

String initAssignment(ElementDeclaration e):
	switch (e.name.toLowerCase()) {
		case "string" : e.name+"=''"
		case "double" : e.name+"=0.0"
		case "integer" : e.name+"=-1"
		case "boolean" : e.name+"=0"
		default : e.name+"=None"
	};

String initAssignment(ComplexType ct):
	getAllBaseDefinitions(ct, {}).getElementsInSequence().reverse().initAssignment().toString(", ");

String initValues(ComplexType ct):
	getAllBaseDefinitions(ct, {}).getElementsInSequence().reverse().name.toString(", ");

/**
 * Returns the complete hierarchy of a type.
 * @param ct A type to start with
 * @param list The list into which ct and its base types are inserted
 */
List[ComplexType] getAllBaseDefinitions(ComplexType ct, List[ComplexType] list):
	list.contains(ct) ? list : list.add(ct) ->
	ct.hasExtension() ?
		getAllBaseDefinitions(ct.baseType, list)
	:
		list
	;

Model getModel(emf::EObject ctx):
	(Model)ctx.eRootContainer;

ComplexType getComplexType(emf::EObject ctx, String name):
	ctx.getModel().eAllContents.typeSelect(ComplexType).selectFirst(e|e.name == name);

String typeName (ElementDeclaration e) :
	e.ref!=null ? e.ref.name : e.type.toString();

cached List[ComplexType] allTypes (Model m) : sortComplexTypes(m.eAllContents.typeSelect(ComplexType));

cached List[ComplexType] allImportedTypes (Model m) :
	let result = ((List[ComplexType]) {}) :
	allTypes(m).collect(t|
		(t.baseType!=null && t.baseType.resourceName()!=null && t.baseType.eRootContainer!=m ? result.add(t.baseType) : null) ->
		result.addAll(t.elements.select(e|e.ref!=null && e.ref.resourceName()!=null && e.ref.eRootContainer!=m).ref)
	) ->
	result.toSet().sortBy(t|t.resourceName());

create Set[ComplexType] importedTypes () : ((List[ComplexType]) {}).toSet();

//=============================================================================
// GLOBAL VARS
//=============================================================================
/**
 * The name of the target file.
 */
String targetFilename () : GLOBALVAR targetFile;
//=============================================================================
// JAVA EXTENSIONS
//=============================================================================
String currentTime () : JAVA org.edna.datamodel.generateds.JavaExtensions.getTimestamp ();

String resourceName (emf::EObject t) :  JAVA org.edna.datamodel.generateds.JavaExtensions.getResourceName(org.eclipse.emf.ecore.EObject);

List[ComplexType] sortComplexTypes (List[ComplexType] types) :  JAVA org.edna.datamodel.generateds.JavaExtensions.sortComplexTypes(java.util.List);

Void resolveAllInResource (emf::EObject ctx) : JAVA org.edna.datamodel.generateds.JavaExtensions.resolveAllInResource (org.eclipse.emf.ecore.EObject);
Void resolveAll (emf::EObject ctx) : JAVA org.eclipse.emf.ecore.util.EcoreUtil.resolveAll (org.eclipse.emf.ecore.EObject);
