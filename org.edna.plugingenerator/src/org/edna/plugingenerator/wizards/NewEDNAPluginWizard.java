package org.edna.plugingenerator.wizards;

import java.io.File;
import java.io.FileFilter;
import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.internal.resources.Folder;
import org.eclipse.core.internal.resources.Workspace;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.edna.plugingenerator.generator.EDNAPluginTemplateFiller;
import org.edna.plugingenerator.generator.WizardHelpers;


public class NewEDNAPluginWizard extends Wizard implements INewWizard, ModifyListener {

	private IWorkbench workbench;
	private IStructuredSelection selection;
	private IFolder folder;
	private SelectDataModelPage selectDataModelPage;
	private SelectPluginTypePage selectPluginTypePage;
	private PluginBrandingPage pluginBrandingPage;

	private EDNAPluginGeneratorModel model;
	private IProject project;
	private String[] pathSegments;

	private IContainer edna_home;
	private IContainer edna_project;
	private IFile edmlFile;
	private IFile pythonFile;


	public NewEDNAPluginWizard() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void init(IWorkbench workbench, IStructuredSelection selection) {
		this.workbench = workbench;
		this.selection = selection;
		if (selection.getFirstElement() instanceof IFolder) {
			registerFolder((IFolder) selection.getFirstElement());
		}
		if (selection.getFirstElement() instanceof IFile) {
			IFile file = (IFile) selection.getFirstElement();
			registerFolder((IFolder) file.getParent());
			
			if(file.getFileExtension().equals("edml")) {
				this.edmlFile = file;
			}
			if(file.getFileExtension().equals("py")) {
				this.pythonFile = file;
			}
			
			
		}
		
		this.model = new EDNAPluginGeneratorModel();
		initialiseModel();
		this.setNeedsProgressMonitor(true);
	}

	private void registerFolder(IFolder folderToRegister) {
		this.folder =  folderToRegister;
		this.project = folderToRegister.getProject();
		this.pathSegments = folderToRegister.getFullPath().segments();
	}
	
	private void getEdnaHome() {

		IContainer temp = this.folder;
		IContainer old = null;
		while (temp != null) {
			if(temp.getName().equals("edna")) {
				edna_home = temp;
				edna_project = old;
			} 
			old = temp;
			temp = temp.getParent();
		}
	}

	private void initialiseModel() {
		getEdnaHome();
		this.model.setAuthor(System.getProperty("user.name"));
		this.model.setName("AutoGenerated");
		this.model.setEdnaHome(this.edna_home);
		this.model.setProject(this.edna_project);
		this.model.setVersion("0.1");	
		IFolder location = edna_home.getFolder(new Path("template/plugins/"));
		this.model.setTemplateDirectory(location);
		if(this.edmlFile != null) this.model.setUmlFileName(this.edmlFile);
		
		//TODO should look at this point to see if this should be a duplicate of an exisiting file.
	}

	@Override
	public void addPages() {
		setWindowTitle("Create New Plugin");
		selectDataModelPage = new SelectDataModelPage();	
		selectPluginTypePage = new SelectPluginTypePage();	
		pluginBrandingPage = new PluginBrandingPage();

		addPage(selectDataModelPage);
		addPage(selectPluginTypePage);
		addPage(pluginBrandingPage);

	}


	protected void generatePlugin(IProgressMonitor monitor) throws Exception {

		// get the plugins folder or create it if required
		IFolder pluginHome = null;
		if(edna_project instanceof IFolder) {
			pluginHome = makeFolder((IFolder) edna_project,"plugins",monitor);
		} else {
			throw new Exception("project is not a folder");
		}

		// now create the plugin folder itself plus all its sub folders
		String pluginName = String.format("%s-v%s", model.getName(), model.getVersion() );
		IFolder plugin = makeFolder(pluginHome,"EDPlugin"+pluginName,monitor);
		IFolder plugins = makeFolder(plugin,"plugins",monitor);
		IFolder tests = makeFolder(plugin,"tests",monitor);
		IFolder data = makeFolder(tests,"data",monitor);		
		IFolder testsuite = makeFolder(tests,"testsuite",monitor);

		// get the template prefix
		String templatePrefix = model.getTemplateFileName().getName();
		templatePrefix = templatePrefix.replace("EDPlugin", "");
		templatePrefix = templatePrefix.replace(".py.template", "").trim();
		
		// now populate the appropriate files
		EDNAPluginTemplateFiller eptf = new EDNAPluginTemplateFiller();
		eptf.put(EDNAPluginTemplateFiller.AUTHOR, model.getAuthor());
		eptf.put(EDNAPluginTemplateFiller.CONTROLEDPLUGINNAME, "NotImplemented");
		eptf.put(EDNAPluginTemplateFiller.COPYRIGHT, model.getCopyright());
		eptf.put(EDNAPluginTemplateFiller.BASEPLUGINNAME, model.getName());
		eptf.put(EDNAPluginTemplateFiller.PLUGINNAME, model.getName());
		String split = model.getUmlFileName().getName();
		String[] parts = split.split("\\.");
		eptf.put(EDNAPluginTemplateFiller.XSDATABASENAME, parts[0]);
		eptf.put(EDNAPluginTemplateFiller.XSDATAINPUTNAME, model.getXsDataInput());
		eptf.put(EDNAPluginTemplateFiller.XSDATARESULTNAME, model.getXsDataResult());
		eptf.put(EDNAPluginTemplateFiller.BASENAME, templatePrefix);
		
		
		// generate and populate the main plugin file
		IFile pluginFile = plugins.getFile("EDPlugin"+templatePrefix+model.getName()+".py");
		eptf.ProcessTemplate(model.getTemplateFileName(), pluginFile, monitor);

		// generate the test files including test suite.
		IFile executeTestFile = testsuite.getFile("EDTestCasePluginExecute"+model.getName()+".py");
		IFile executeTemplate = model.getTemplateFileName().getParent().getParent().getFile(new Path("tests/testsuite/EDTestCasePluginExecute"+templatePrefix+".py.template"));
		eptf.ProcessTemplate(executeTemplate, executeTestFile, monitor);

		IFile unitTestFile = testsuite.getFile("EDTestCasePluginUnit"+model.getName()+".py");
		IFile unitTemplate = model.getTemplateFileName().getParent().getParent().getFile(new Path("tests/testsuite/EDTestCasePluginUnit"+templatePrefix+".py.template"));
		eptf.ProcessTemplate(unitTemplate, unitTestFile, monitor);

		IFile testSuiteFile = testsuite.getFile("EDTestCaseSuitePlugin"+model.getName()+".py");
		IFile suiteTemplate = model.getTemplateFileName().getParent().getParent().getFile(new Path("tests/testsuite/EDTestSuitePlugin.py.template"));
		eptf.ProcessTemplate(suiteTemplate, testSuiteFile, monitor);

		// generate the test data which will be used
		IFile inputDataFile = data.getFile("XSDataInput"+model.getName()+"_reference.xml");
		IFile inputDataTemplate = model.getTemplateFileName().getParent().getParent().getFile(new Path("tests/data/XSDataInputTemplate_reference.xml"));
		eptf.ProcessTemplate(inputDataTemplate, inputDataFile, monitor);

		IFile resultDataFile = data.getFile("XSDataResult"+model.getName()+"_reference.xml");
		IFile resultDataTemplate = model.getTemplateFileName().getParent().getParent().getFile(new Path("tests/data/XSDataResultTemplate_reference.xml"));
		eptf.ProcessTemplate(resultDataTemplate, resultDataFile, monitor);
		
		// generate the test configuration file
		IFile configFile = data.getFile("XSConfiguration_"+model.getName()+".xml");
		IFile configTemplate = model.getTemplateFileName().getParent().getParent().getFile(new Path("tests/data/XSConfigTemplate.xml"));
		eptf.ProcessTemplate(configTemplate, configFile, monitor);
		
		
		//TODO add in the additions to the config file
		
	}

	private IFolder makeFolder(IFolder perant, String name, IProgressMonitor monitor) throws CoreException {
		IFolder folder = perant.getFolder(name);
		if (folder.exists() == false) {
			folder.create(true, true, monitor);
		}
		return folder;
	}




	@Override
	public boolean performFinish() {
		try {
			getContainer().run(true, true, new IRunnableWithProgress() {

				@Override
				public void run(IProgressMonitor monitor) throws InvocationTargetException,
				InterruptedException {

					try {
						generatePlugin(monitor);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
			});
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	public EDNAPluginGeneratorModel getModel() {
		return model;
	}

	@Override
	public void modifyText(ModifyEvent event) {

		// Update from selecting an XSData Input
		if (event.widget == selectDataModelPage.xsDataInput) {
			model.setXsDataInput(selectDataModelPage.xsDataInput.getText());
		}

		// Update from selecting an XSData Result
		if (event.widget == selectDataModelPage.xsDataResult) {
			model.setXsDataResult(selectDataModelPage.xsDataResult.getText());
		}

		// Update from selecting an XSData Result
		if (event.widget == selectDataModelPage.xsDataResult) {
			model.setXsDataResult(selectDataModelPage.xsDataResult.getText());
		}

		// Update from selecting an template file
		if (event.widget == selectPluginTypePage.templateFile) {
			model.setTemplateFileName(model.getTemplateDirectory().getFile(selectPluginTypePage.templateFile.getText()));
			checkPluginName();
		}

		// Update from selecting an Plugin Name		
		if (event.widget == pluginBrandingPage.pluginName) {
			checkPluginName();
		}

		if (event.widget == pluginBrandingPage.pluginAuthor) {
			model.setAuthor(pluginBrandingPage.pluginAuthor.getText());
		}

		if (event.widget == pluginBrandingPage.pluginConfiguration) {
			model.setConfiguration(pluginBrandingPage.pluginConfiguration.getText());
		}

		if (event.widget == pluginBrandingPage.pluginCopyright) {
			model.setCopyright(pluginBrandingPage.pluginCopyright.getText());
		}

		if (event.widget == pluginBrandingPage.pluginVersion) {
			model.setVersion(pluginBrandingPage.pluginVersion.getText());
		}

		// finally update all buttons
		getContainer().updateButtons();

	}

	public void checkPluginName() {
		//		String name = model.getTemplateFileName().getName();
		//		String[] parts = name.split(".py.");
		//		String prefix = parts[0];
		if(pluginBrandingPage.pluginName != null) {
			model.setName(pluginBrandingPage.pluginName.getText());
		}		
	}


	@Override
	public boolean canFinish() {
		return model.isComplete();
	}



}
